// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xanes.DataAccess.Data;

#nullable disable

namespace Xanes.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240312182044_FixIdentificationTypeModel")]
    partial class FixIdentificationTypeModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Xanes.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("BankAccountExcludeUId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bankaccountexcludeuid");

                    b.Property<decimal>("BankingCommissionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("bankingcommissionpercentage");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("iscompany");

                    b.Property<string>("LogoBank")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("logobank");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("OrderPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("orderpriority");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_banks");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "banks_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_banks_companyid_code");

                    b.ToTable("banks", "bco");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccountExcludeUId = new Guid("9f8a706a-f0c4-4bb0-9159-d9f0af666152"),
                            BankingCommissionPercentage = 0m,
                            Code = "BAC",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(2543),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoBank = "/Content/images/Bank/BacLogo.png",
                            Name = "Banco de America Central",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 5,
                            BankAccountExcludeUId = new Guid("bbcf016d-4cdd-43b7-99b0-bea2375ce2ce"),
                            BankingCommissionPercentage = 0m,
                            Code = "FICOHSA",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(2568),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoBank = "/Content/images/Bank/FicohsaLogo.png",
                            Name = "FICOHSA",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 2,
                            BankingCommissionPercentage = 0m,
                            Code = "BDF",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(2572),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoBank = "/Content/images/Bank/BdfLogo.png",
                            Name = "Banco de Finanza",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 3,
                            BankingCommissionPercentage = 0m,
                            Code = "LAFISE",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(2574),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoBank = "/Content/images/Bank/LafiseLogo.png",
                            Name = "Bancentro",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 4,
                            BankingCommissionPercentage = 0m,
                            Code = "ATLANT",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(2576),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoBank = "/Content/images/Bank/AtlantidaLogo.png",
                            Name = "ATLANTIDA",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 6,
                            BankingCommissionPercentage = 0m,
                            Code = "BANPRO",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(2578),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoBank = "/Content/images/Bank/BanproLogo.png",
                            Name = "BANPRO",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 7,
                            BankingCommissionPercentage = 0m,
                            Code = "AVANZ",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(2580),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoBank = "/Content/images/Bank/AvanzLogo.png",
                            Name = "AVANZ",
                            OrderPriority = 0
                        });
                });

            modelBuilder.Entity("Xanes.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("code");

                    b.Property<string>("CodeIso")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("codeiso");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("NameForeign")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("nameforeign");

                    b.Property<string>("NameForeignSingular")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("nameforeignsingular");

                    b.Property<string>("NameSingular")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("namesingular");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex(new[] { "CompanyId", "CodeIso" }, "currencies_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_codeiso");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "currencies_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Abbreviation" }, "currencies_idx_2030")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_abbreviation");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "currencies_idx_2040")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_numeral");

                    b.ToTable("currencies", "cnf");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "C$",
                            Code = "COR",
                            CodeIso = "NIO",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(8780),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            Name = "CORDOBAS",
                            NameForeign = "CORDOBAS",
                            NameForeignSingular = "CORDOBA",
                            NameSingular = "CORDOBA",
                            Numeral = 1
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "U$",
                            Code = "USD",
                            CodeIso = "USD",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(8791),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            Name = "DOLARES",
                            NameForeign = "DOLLARS",
                            NameForeignSingular = "DOLLAR",
                            NameSingular = "DOLAR",
                            Numeral = 2
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "€",
                            Code = "EUR",
                            CodeIso = "EUR",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 784, DateTimeKind.Utc).AddTicks(8795),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            Name = "EUROS",
                            NameForeign = "EUROS",
                            NameForeignSingular = "EURO",
                            NameSingular = "EURO",
                            Numeral = 4
                        });
                });

            modelBuilder.Entity("Xanes.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("businessname");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    b.Property<int>("CategoryNumeral")
                        .HasColumnType("int")
                        .HasColumnName("categorynumeral");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("code");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("commercialname");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("firstname");

                    b.Property<string>("Identificationnumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("identificationnumber");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsBank")
                        .HasColumnType("bit")
                        .HasColumnName("isbank");

                    b.Property<bool>("IsSystemRow")
                        .HasColumnType("bit")
                        .HasColumnName("issystemrow");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("lastname");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("secondname");

                    b.Property<string>("SecondSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("secondsurname");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeid");

                    b.Property<int>("TypeNumeral")
                        .HasColumnType("int")
                        .HasColumnName("typenumeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_customers_categoryid");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_customers_typeid");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "customers_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "TypeId", "Identificationnumber" }, "customers_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_companyid_typeid_identificationnumber");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "customers_idx_2030")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_companyid_code");

                    b.ToTable("customers", "cxc");

                    b.HasData(
                        new
                        {
                            Id = 5809,
                            BusinessName = "AMERICAN PHARMA",
                            CategoryId = 6,
                            CategoryNumeral = 6,
                            Code = "00803",
                            CommercialName = "AMERICAN PHARMA",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(1557),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FirstName = "",
                            Identificationnumber = "J0310000122865",
                            IsActive = true,
                            IsBank = false,
                            IsSystemRow = false,
                            LastName = "",
                            SecondName = "",
                            SecondSurname = "",
                            TypeId = 1,
                            TypeNumeral = 1
                        },
                        new
                        {
                            Id = 5808,
                            BusinessName = "MIGUEL FERNANDO RAMIREZ OCON",
                            CategoryId = 6,
                            CategoryNumeral = 6,
                            Code = "00802",
                            CommercialName = "MIGUEL FERNANDO RAMIREZ OCON",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(1574),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FirstName = "MIGUEL",
                            Identificationnumber = "0013009870051Y",
                            IsActive = true,
                            IsBank = false,
                            IsSystemRow = false,
                            LastName = "RAMIREZ",
                            SecondName = "FERNANDO",
                            SecondSurname = "OCON",
                            TypeId = 2,
                            TypeNumeral = 2
                        },
                        new
                        {
                            Id = 5807,
                            BusinessName = "JIMMY ALEXANDER SANDOVAL FRANCO",
                            CategoryId = 6,
                            CategoryNumeral = 6,
                            Code = "00801",
                            CommercialName = "JIMMY ALEXANDER SANDOVAL FRANCO",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(1578),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FirstName = "JIMMY",
                            Identificationnumber = "244686858",
                            IsActive = true,
                            IsBank = false,
                            IsSystemRow = false,
                            LastName = "SANDOVAL",
                            SecondName = "ALEXANDER",
                            SecondSurname = "FRANCO",
                            TypeId = 2,
                            TypeNumeral = 2
                        },
                        new
                        {
                            Id = 5806,
                            BusinessName = "INSUMOS SMART NICARAGUA SOCIEDAD ANONIMA",
                            CategoryId = 6,
                            CategoryNumeral = 6,
                            Code = "00800",
                            CommercialName = "INSUMOS SMART NICARAGUA SOCIEDAD ANONIMA",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(1582),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FirstName = "",
                            Identificationnumber = "J0310000441430",
                            IsActive = true,
                            IsBank = false,
                            IsSystemRow = false,
                            LastName = "",
                            SecondName = "",
                            SecondSurname = "",
                            TypeId = 1,
                            TypeNumeral = 1
                        },
                        new
                        {
                            Id = 5805,
                            BusinessName = "MEYLING RAQUEL SANCHEZ ORTIZ",
                            CategoryId = 6,
                            CategoryNumeral = 6,
                            Code = "00799",
                            CommercialName = "MEYLING RAQUEL SANCHEZ ORTIZ",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(1586),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FirstName = "MEYLING",
                            Identificationnumber = "0012206860039E",
                            IsActive = true,
                            IsBank = false,
                            IsSystemRow = false,
                            LastName = "SANCHEZ",
                            SecondName = "RAQUEL",
                            SecondSurname = "ORTIZ",
                            TypeId = 2,
                            TypeNumeral = 2
                        });
                });

            modelBuilder.Entity("Xanes.Models.CustomerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsBank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isbank");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_customerscategories");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "customerscategories_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_customerscategories_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "customerscategories_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_customerscategories_companyid_numeral");

                    b.ToTable("customerscategories", "cxc");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "BAN",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(781),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = true,
                            Name = "Bancos",
                            Numeral = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "FIN",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(793),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = true,
                            Name = "Financieras",
                            Numeral = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "IND",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(796),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Industrias",
                            Numeral = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "ONG",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(798),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "ONG",
                            Numeral = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "UNI",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(800),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Universidades",
                            Numeral = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "COM",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(802),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Comercial",
                            Numeral = 6
                        },
                        new
                        {
                            Id = 7,
                            Code = "FAM",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(804),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Farmacias",
                            Numeral = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "TEC",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(805),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Tecnológicos",
                            Numeral = 8
                        },
                        new
                        {
                            Id = 9,
                            Code = "OTR",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(807),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Otros",
                            Numeral = 9
                        },
                        new
                        {
                            Id = 10,
                            Code = "SER",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 786, DateTimeKind.Utc).AddTicks(809),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Servicios",
                            Numeral = 10
                        });
                });

            modelBuilder.Entity("Xanes.Models.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("FormatExpressionNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("formatexpressionnumber");

                    b.Property<short>("IdentificationMaxLength")
                        .HasColumnType("smallint")
                        .HasColumnName("identificationmaxlength");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsForeign")
                        .HasColumnType("bit")
                        .HasColumnName("isforeign");

                    b.Property<bool>("IsLegal")
                        .HasColumnType("bit")
                        .HasColumnName("islegal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<string>("RegularExpressionNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("regularexpressionnumber");

                    b.Property<string>("SubstitutionExpressionNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("substitutionexpressionnumber");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_identificationstypes");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "identificationstypes_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_identificationstypes_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "identificationstypes_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_identificationstypes_companyid_numeral");

                    b.ToTable("identificationstypes", "cnf");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "RUC",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(5287),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "$1",
                            IdentificationMaxLength = (short)14,
                            IsActive = true,
                            IsForeign = false,
                            IsLegal = true,
                            Name = "Registro Único Cotnribuyente",
                            Numeral = 1,
                            RegularExpressionNumber = "([J0-9]\\\\d{12}[a-zA-Z0-9])",
                            SubstitutionExpressionNumber = "$1"
                        },
                        new
                        {
                            Id = 2,
                            Code = "CEDU",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(5297),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "$1-$2-$3",
                            IdentificationMaxLength = (short)14,
                            IsActive = true,
                            IsForeign = false,
                            IsLegal = false,
                            Name = "Cédula de Identificación",
                            Numeral = 2,
                            RegularExpressionNumber = "(\\d{3})-*?(\\d{6})-*?(\\d{4}\\w{1})",
                            SubstitutionExpressionNumber = "$1$2$3"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DIMEX",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(5301),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = false,
                            IsForeign = true,
                            IsLegal = false,
                            Name = "Documento de Identidad Migratorio para Extranjeros",
                            Numeral = 4,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        },
                        new
                        {
                            Id = 4,
                            Code = "NITE",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(5304),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = false,
                            IsForeign = false,
                            IsLegal = false,
                            Name = "Número de Identificación Tributaria Especial",
                            Numeral = 8,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        },
                        new
                        {
                            Id = 5,
                            Code = "DIDI",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(5306),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = false,
                            IsForeign = true,
                            IsLegal = false,
                            Name = "Documento de Identificación para Diplomático",
                            Numeral = 16,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        },
                        new
                        {
                            Id = 6,
                            Code = "PASS",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 787, DateTimeKind.Utc).AddTicks(5309),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = true,
                            IsForeign = true,
                            IsLegal = false,
                            Name = "Pasaporte",
                            Numeral = 32,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        });
                });

            modelBuilder.Entity("Xanes.Models.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("numeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_personstypes");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "customerstypes_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_personstypes_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "customerstypes_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_personstypes_companyid_numeral");

                    b.ToTable("personstypes", "cnf");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NAT",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 785, DateTimeKind.Utc).AddTicks(6979),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "Natural",
                            Numeral = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "JUR",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 785, DateTimeKind.Utc).AddTicks(6986),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "Jurídico",
                            Numeral = 2
                        });
                });

            modelBuilder.Entity("Xanes.Models.QuotationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<short>("OrderSequence")
                        .HasColumnType("smallint")
                        .HasColumnName("ordersequence");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_quotationstypes");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "quotationstypes_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_quotationstypes_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "quotationstypes_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_quotationstypes_companyid_numeral");

                    b.ToTable("quotationstypes", "fac");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "COM",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 785, DateTimeKind.Utc).AddTicks(3032),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "COMPRA",
                            Numeral = 1,
                            OrderSequence = (short)10
                        },
                        new
                        {
                            Id = 2,
                            Code = "VTA",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 785, DateTimeKind.Utc).AddTicks(3041),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "VENTA",
                            Numeral = 2,
                            OrderSequence = (short)20
                        },
                        new
                        {
                            Id = 3,
                            Code = "TRF",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 3, 12, 18, 20, 43, 785, DateTimeKind.Utc).AddTicks(3043),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "TRANSFERENCIA",
                            Numeral = 4,
                            OrderSequence = (short)30
                        });
                });

            modelBuilder.Entity("Xanes.Models.Customer", b =>
                {
                    b.HasOne("Xanes.Models.CustomerCategory", "CategoryTrx")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_customers_customerscategories_categoryid");

                    b.HasOne("Xanes.Models.PersonType", "TypeTrx")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_customers_personstypes_typeid");

                    b.Navigation("CategoryTrx");

                    b.Navigation("TypeTrx");
                });
#pragma warning restore 612, 618
        }
    }
}
