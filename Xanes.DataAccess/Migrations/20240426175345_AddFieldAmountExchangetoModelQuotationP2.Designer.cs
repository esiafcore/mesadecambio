// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xanes.DataAccess.Data;

#nullable disable

namespace Xanes.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240426175345_AddFieldAmountExchangetoModelQuotationP2")]
    partial class AddFieldAmountExchangetoModelQuotationP2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Xanes.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("BankAccountExcludeUId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bankaccountexcludeuid");

                    b.Property<decimal>("BankingCommissionPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("bankingcommissionpercentage");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("iscompany");

                    b.Property<string>("LogoLocalPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("logolocalpath");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("logourl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("OrderPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("orderpriority");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_banks");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "banks_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_banks_companyid_code");

                    b.ToTable("banks", "bco");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BankAccountExcludeUId = new Guid("9f8a706a-f0c4-4bb0-9159-d9f0af666152"),
                            BankingCommissionPercentage = 0m,
                            Code = "BAC",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoUrl = "/Content/images/Bank/BacLogo.png",
                            Name = "Banco de America Central",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 5,
                            BankAccountExcludeUId = new Guid("bbcf016d-4cdd-43b7-99b0-bea2375ce2ce"),
                            BankingCommissionPercentage = 0m,
                            Code = "FICOHSA",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoUrl = "/Content/images/Bank/FicohsaLogo.png",
                            Name = "FICOHSA",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 2,
                            BankingCommissionPercentage = 0m,
                            Code = "BDF",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoUrl = "/Content/images/Bank/BdfLogo.png",
                            Name = "Banco de Finanza",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 3,
                            BankingCommissionPercentage = 0m,
                            Code = "LAFISE",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoUrl = "/Content/images/Bank/LafiseLogo.png",
                            Name = "Bancentro",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 4,
                            BankingCommissionPercentage = 0m,
                            Code = "ATLANT",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoUrl = "/Content/images/Bank/AtlantidaLogo.png",
                            Name = "ATLANTIDA",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 6,
                            BankingCommissionPercentage = 0m,
                            Code = "BANPRO",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoUrl = "/Content/images/Bank/BanproLogo.png",
                            Name = "BANPRO",
                            OrderPriority = 0
                        },
                        new
                        {
                            Id = 7,
                            BankingCommissionPercentage = 0m,
                            Code = "AVANZ",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsCompany = false,
                            LogoUrl = "/Content/images/Bank/AvanzLogo.png",
                            Name = "AVANZ",
                            OrderPriority = 0
                        });
                });

            modelBuilder.Entity("Xanes.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressPrimary")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("addressprimary");

                    b.Property<string>("BillingAuthorizationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("billingauthorizationnumber");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("businessname");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("commercialname");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("countrycode");

                    b.Property<short>("CountryNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("countrynumber");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("identificationnumber");

                    b.Property<string>("ImageLogoLocalPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("imagelogolocalpath");

                    b.Property<string>("ImageLogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("imagelogourl");

                    b.Property<string>("ImageSplashLocalPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("imagesplashlocalpath");

                    b.Property<string>("ImageSplashUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("imagesplashurl");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("JournalAuthorizationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("journalauthorizationnumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.Property<bool>("UseBranch")
                        .HasColumnType("bit")
                        .HasColumnName("usebranch");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.HasIndex(new[] { "CountryNumber", "IdentificationNumber" }, "companies_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_countrynumber_identificationnumber");

                    b.HasIndex(new[] { "CountryCode", "IdentificationNumber" }, "companies_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_companies_countrycode_identificationnumber");

                    b.ToTable("companies", "cnf");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressPrimary = "Portón Principal del Colegio Teresiano 1/2c.al este. Managua, Nicaragua",
                            BusinessName = "Factoring S.A.",
                            CommercialName = "Factoring S.A.",
                            CountryCode = "NIC",
                            CountryNumber = (short)558,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 26, 17, 53, 44, 390, DateTimeKind.Utc).AddTicks(694),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IdentificationNumber = "J0310000031339",
                            ImageLogoLocalPath = "wwwroot/CompanyImagesLogo/8071a404-950c-4df1-9875-27db4f4a4c26.jpg",
                            ImageLogoUrl = "https://localhost:7102/CompanyImagesLogo/8071a404-950c-4df1-9875-27db4f4a4c26.jpg",
                            IsActive = true,
                            Name = "Factoring S.A.",
                            PhoneNumber = "+505 22782272",
                            UseBranch = true,
                            Website = "https://factoring.com.ni"
                        });
                });

            modelBuilder.Entity("Xanes.Models.ConfigCxc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<bool>("IsAutomaticallyCustomerCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isautomaticallycustomercode");

                    b.Property<long>("SequentialNumberCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("sequentialnumbercustomer");

                    b.Property<long>("SequentialNumberDraftCustomer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("sequentialnumberdraftcustomer");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_configscxc");

                    b.HasIndex(new[] { "CompanyId" }, "configscxc_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_configscxc_companyid");

                    b.ToTable("configscxc", "cxc");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsAutomaticallyCustomerCode = true,
                            SequentialNumberCustomer = 0L,
                            SequentialNumberDraftCustomer = 0L
                        });
                });

            modelBuilder.Entity("Xanes.Models.ConfigFac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<bool>("IsAutomaticallyQuotationCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isautomaticallyquotationcode");

                    b.Property<long>("SequentialNumberDraftQuotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("sequentialnumberdraftquotation");

                    b.Property<long>("SequentialNumberQuotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("sequentialnumberquotation");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_configsfac");

                    b.HasIndex(new[] { "CompanyId" }, "configsfac_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_configsfac_companyid");

                    b.ToTable("configsfac", "fac");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsAutomaticallyQuotationCode = true,
                            SequentialNumberDraftQuotation = 0L,
                            SequentialNumberQuotation = 0L
                        });
                });

            modelBuilder.Entity("Xanes.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("abbreviation");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("code");

                    b.Property<string>("CodeIso")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("codeiso");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("NameForeign")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("nameforeign");

                    b.Property<string>("NameForeignSingular")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("nameforeignsingular");

                    b.Property<string>("NameSingular")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("namesingular");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.HasIndex(new[] { "CompanyId", "CodeIso" }, "currencies_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_codeiso");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "currencies_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Abbreviation" }, "currencies_idx_2030")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_abbreviation");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "currencies_idx_2040")
                        .IsUnique()
                        .HasDatabaseName("ix_currencies_companyid_numeral");

                    b.ToTable("currencies", "cnf");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "C$",
                            Code = "COR",
                            CodeIso = "NIO",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            Name = "CORDOBAS",
                            NameForeign = "CORDOBAS",
                            NameForeignSingular = "CORDOBA",
                            NameSingular = "CORDOBA",
                            Numeral = 1
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "U$",
                            Code = "USD",
                            CodeIso = "USD",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            Name = "DOLARES",
                            NameForeign = "DOLLARS",
                            NameForeignSingular = "DOLLAR",
                            NameSingular = "DOLAR",
                            Numeral = 2
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "€",
                            Code = "EUR",
                            CodeIso = "EUR",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            Name = "EUROS",
                            NameForeign = "EUROS",
                            NameForeignSingular = "EURO",
                            NameSingular = "EURO",
                            Numeral = 4
                        });
                });

            modelBuilder.Entity("Xanes.Models.CurrencyExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BuyRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("buyrate");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currencyid");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int")
                        .HasColumnName("currencytype");

                    b.Property<DateOnly>("DateTransa")
                        .HasColumnType("date")
                        .HasColumnName("datetransa");

                    b.Property<decimal>("OfficialRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("officialrate");

                    b.Property<decimal>("SellRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("sellrate");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_currenciesexchangerates");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_currenciesexchangerates_currencyid");

                    b.HasIndex(new[] { "CompanyId", "CurrencyId", "DateTransa" }, "currenciesexchangerates_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_currenciesexchangerates_companyid_currencyid_datetransa");

                    b.HasIndex(new[] { "CompanyId", "CurrencyType", "DateTransa" }, "currenciesexchangerates_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_currenciesexchangerates_companyid_currencytype_datetransa");

                    b.ToTable("currenciesexchangerates", "cnf");
                });

            modelBuilder.Entity("Xanes.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressPrimary")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("addressprimary");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("businessname");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("categoryid");

                    b.Property<int>("CategoryNumeral")
                        .HasColumnType("int")
                        .HasColumnName("categorynumeral");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("code");

                    b.Property<string>("CommercialName")
                        .IsRequired()
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("commercialname");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("firstname");

                    b.Property<string>("Identificationnumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("identificationnumber");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<string>("InternalSerial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue("Z")
                        .HasColumnName("internalserial");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsBank")
                        .HasColumnType("bit")
                        .HasColumnName("isbank");

                    b.Property<bool>("IsSystemRow")
                        .HasColumnType("bit")
                        .HasColumnName("issystemrow");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("lastname");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("secondname");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("secondsurname");

                    b.Property<int>("SectorId")
                        .HasColumnType("int")
                        .HasColumnName("sectorid");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeid");

                    b.Property<int>("TypeNumeral")
                        .HasColumnType("int")
                        .HasColumnName("typenumeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_customers_categoryid");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_customers_sectorid");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_customers_typeid");

                    b.HasIndex(new[] { "CompanyId", "InternalSerial", "Code" }, "customers_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_companyid_internalserial_code");

                    b.HasIndex(new[] { "CompanyId", "TypeId", "Identificationnumber" }, "customers_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_companyid_typeid_identificationnumber");

                    b.ToTable("customers", "cxc");
                });

            modelBuilder.Entity("Xanes.Models.CustomerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsBank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isbank");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_customerscategories");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "customerscategories_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_customerscategories_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "customerscategories_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_customerscategories_companyid_numeral");

                    b.ToTable("customerscategories", "cxc");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "BAN",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = true,
                            Name = "Bancos",
                            Numeral = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "FIN",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = true,
                            Name = "Financieras",
                            Numeral = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "IND",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Industrias",
                            Numeral = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "ONG",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "ONG",
                            Numeral = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "UNI",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Universidades",
                            Numeral = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "COM",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Comercial",
                            Numeral = 6
                        },
                        new
                        {
                            Id = 7,
                            Code = "FAM",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Farmacias",
                            Numeral = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "TEC",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Tecnológicos",
                            Numeral = 8
                        },
                        new
                        {
                            Id = 9,
                            Code = "OTR",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Otros",
                            Numeral = 9
                        },
                        new
                        {
                            Id = 10,
                            Code = "SER",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            IsActive = true,
                            IsBank = false,
                            Name = "Servicios",
                            Numeral = 10
                        });
                });

            modelBuilder.Entity("Xanes.Models.CustomerSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("code");

                    b.Property<string>("CodePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("codepath");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<short>("Depthnumber")
                        .HasColumnType("smallint")
                        .HasColumnName("depthnumber");

                    b.Property<string>("IdPath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("idpath");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parentid");

                    b.Property<short?>("SequentialDraftNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("sequentialdraftnumber");

                    b.Property<short?>("SequentialNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("sequentialnumber");

                    b.Property<short>("TypeLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("typelevel");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_customerssectors");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_customerssectors_parentid");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "customerssectors_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_customerssectors_companyid_code");

                    b.ToTable("customerssectors", "cxc");
                });

            modelBuilder.Entity("Xanes.Models.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("FormatExpressionNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("formatexpressionnumber");

                    b.Property<short>("IdentificationMaxLength")
                        .HasColumnType("smallint")
                        .HasColumnName("identificationmaxlength");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedby");

                    b.Property<DateTime?>("InactivatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactivateddate");

                    b.Property<string>("InactivatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("inactivatedhostname");

                    b.Property<string>("InactivatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("inactivatedipv4");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsForeign")
                        .HasColumnType("bit")
                        .HasColumnName("isforeign");

                    b.Property<bool>("IsLegal")
                        .HasColumnType("bit")
                        .HasColumnName("islegal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<string>("RegularExpressionNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("regularexpressionnumber");

                    b.Property<string>("SubstitutionExpressionNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("substitutionexpressionnumber");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_identificationstypes");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "identificationstypes_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_identificationstypes_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "identificationstypes_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_identificationstypes_companyid_numeral");

                    b.ToTable("identificationstypes", "cnf");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "RUC",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "$1",
                            IdentificationMaxLength = (short)14,
                            IsActive = true,
                            IsForeign = false,
                            IsLegal = true,
                            Name = "Registro Único Cotnribuyente",
                            Numeral = 1,
                            RegularExpressionNumber = "([J0-9]\\\\d{12}[a-zA-Z0-9])",
                            SubstitutionExpressionNumber = "$1"
                        },
                        new
                        {
                            Id = 2,
                            Code = "CEDU",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "$1-$2-$3",
                            IdentificationMaxLength = (short)14,
                            IsActive = true,
                            IsForeign = false,
                            IsLegal = false,
                            Name = "Cédula de Identificación",
                            Numeral = 2,
                            RegularExpressionNumber = "(\\d{3})-*?(\\d{6})-*?(\\d{4}\\w{1})",
                            SubstitutionExpressionNumber = "$1$2$3"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DIMEX",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = false,
                            IsForeign = true,
                            IsLegal = false,
                            Name = "Documento de Identidad Migratorio para Extranjeros",
                            Numeral = 4,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        },
                        new
                        {
                            Id = 4,
                            Code = "NITE",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = false,
                            IsForeign = false,
                            IsLegal = false,
                            Name = "Número de Identificación Tributaria Especial",
                            Numeral = 8,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        },
                        new
                        {
                            Id = 5,
                            Code = "DIDI",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = false,
                            IsForeign = true,
                            IsLegal = false,
                            Name = "Documento de Identificación para Diplomático",
                            Numeral = 16,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        },
                        new
                        {
                            Id = 6,
                            Code = "PASS",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            FormatExpressionNumber = "",
                            IdentificationMaxLength = (short)0,
                            IsActive = true,
                            IsForeign = true,
                            IsLegal = false,
                            Name = "Pasaporte",
                            Numeral = 32,
                            RegularExpressionNumber = "",
                            SubstitutionExpressionNumber = ""
                        });
                });

            modelBuilder.Entity("Xanes.Models.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("numeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_personstypes");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "customerstypes_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_personstypes_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "customerstypes_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_personstypes_companyid_numeral");

                    b.ToTable("personstypes", "cnf");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NAT",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "Natural",
                            Numeral = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "JUR",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "Jurídico",
                            Numeral = 2
                        });
                });

            modelBuilder.Entity("Xanes.Models.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("amountcost");

                    b.Property<decimal>("AmountExchange")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("amountexchange");

                    b.Property<decimal>("AmountRevenue")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("amountrevenue");

                    b.Property<decimal>("AmountTransaction")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("amounttransaction");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<int>("CurrencyDepositId")
                        .HasColumnType("int")
                        .HasColumnName("currencydepositid");

                    b.Property<int>("CurrencyDepositType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("currencydeposittype");

                    b.Property<int>("CurrencyTransaId")
                        .HasColumnType("int")
                        .HasColumnName("currencytransaid");

                    b.Property<int>("CurrencyTransaType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("currencytransatype");

                    b.Property<int>("CurrencyTransferId")
                        .HasColumnType("int")
                        .HasColumnName("currencytransferid");

                    b.Property<int>("CurrencyTransferType")
                        .HasColumnType("int")
                        .HasColumnName("currencytransfertype");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customerid");

                    b.Property<DateOnly>("DateTransa")
                        .HasColumnType("date")
                        .HasColumnName("datetransa");

                    b.Property<decimal>("ExchangeRateBuyReal")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("exchangeratebuyreal");

                    b.Property<decimal>("ExchangeRateBuyTransa")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("exchangeratebuytransa");

                    b.Property<decimal>("ExchangeRateOfficialReal")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("exchangerateofficialreal");

                    b.Property<decimal>("ExchangeRateOfficialTransa")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("exchangerateofficialtransa");

                    b.Property<decimal>("ExchangeRateSellReal")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("exchangeratesellreal");

                    b.Property<decimal>("ExchangeRateSellTransa")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasColumnName("exchangerateselltransa");

                    b.Property<string>("InternalSerial")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue("Z")
                        .HasColumnName("internalserial");

                    b.Property<bool>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isclosed");

                    b.Property<bool>("IsLoan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isloan");

                    b.Property<bool>("IsPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("ispayment");

                    b.Property<bool>("IsPosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isposted");

                    b.Property<bool>("IsVoid")
                        .HasColumnType("bit")
                        .HasColumnName("isvoid");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("typeid");

                    b.Property<int>("TypeNumeral")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("typenumeral");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_quotations");

                    b.HasIndex("CurrencyDepositId")
                        .HasDatabaseName("ix_quotations_currencydepositid");

                    b.HasIndex("CurrencyTransaId")
                        .HasDatabaseName("ix_quotations_currencytransaid");

                    b.HasIndex("CurrencyTransferId")
                        .HasDatabaseName("ix_quotations_currencytransferid");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_quotations_customerid");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_quotations_typeid");

                    b.HasIndex(new[] { "CompanyId", "TypeId", "DateTransa", "InternalSerial", "Numeral" }, "quotations_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_quotations_companyid_typeid_datetransa_internalserial_numeral");

                    b.ToTable("quotations", "fac");
                });

            modelBuilder.Entity("Xanes.Models.QuotationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AmountDetail")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("amountdetail");

                    b.Property<int>("BankSourceId")
                        .HasColumnType("int")
                        .HasColumnName("banksourceid");

                    b.Property<int>("BankTargetId")
                        .HasColumnType("int")
                        .HasColumnName("banktargetid");

                    b.Property<Guid?>("BankTransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("banktransactionid");

                    b.Property<Guid?>("BankTransactionVoidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("banktransactionvoidid");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<int>("CurrencyDetailId")
                        .HasColumnType("int")
                        .HasColumnName("currencydetailid");

                    b.Property<bool>("IsBankTransactionPosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isbanktransactionposted");

                    b.Property<bool>("IsBankTransactionVoidPosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isbanktransactionvoidposted");

                    b.Property<bool>("IsJournalEntryPosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isjournalentryposted");

                    b.Property<bool>("IsJournalEntryVoidPosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("isjournalentryvoidposted");

                    b.Property<Guid?>("JournalEntryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("journalentryid");

                    b.Property<Guid?>("JournalEntryVoidId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("journalentryvoidid");

                    b.Property<int>("LineNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("linenumber");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parentid");

                    b.Property<short>("QuotationDetailType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1)
                        .HasColumnName("quotationdetailtype");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_quotationsdetails");

                    b.HasIndex("BankSourceId")
                        .HasDatabaseName("ix_quotationsdetails_banksourceid");

                    b.HasIndex("BankTargetId")
                        .HasDatabaseName("ix_quotationsdetails_banktargetid");

                    b.HasIndex("CurrencyDetailId")
                        .HasDatabaseName("ix_quotationsdetails_currencydetailid");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_quotationsdetails_parentid");

                    b.HasIndex(new[] { "CompanyId", "ParentId", "QuotationDetailType", "LineNumber" }, "quotationsdetails_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_quotationsdetails_companyid_parentid_quotationdetailtype_linenumber");

                    b.ToTable("quotationsdetails", "fac");
                });

            modelBuilder.Entity("Xanes.Models.QuotationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("code");

                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("companyid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdby");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createddate");

                    b.Property<string>("CreatedHostName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("createdhostname");

                    b.Property<string>("CreatedIpv4")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("createdipv4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("name");

                    b.Property<int>("Numeral")
                        .HasColumnType("int")
                        .HasColumnName("numeral");

                    b.Property<short>("OrderSequence")
                        .HasColumnType("smallint")
                        .HasColumnName("ordersequence");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedby");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("updateddate");

                    b.Property<string>("UpdatedHostName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("updatedhostname");

                    b.Property<string>("UpdatedIpv4")
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)")
                        .HasColumnName("updatedipv4");

                    b.HasKey("Id")
                        .HasName("pk_quotationstypes");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "quotationstypes_idx_2010")
                        .IsUnique()
                        .HasDatabaseName("ix_quotationstypes_companyid_code");

                    b.HasIndex(new[] { "CompanyId", "Numeral" }, "quotationstypes_idx_2020")
                        .IsUnique()
                        .HasDatabaseName("ix_quotationstypes_companyid_numeral");

                    b.ToTable("quotationstypes", "fac");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "COM",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "COMPRA",
                            Numeral = 1,
                            OrderSequence = (short)10
                        },
                        new
                        {
                            Id = 2,
                            Code = "VTA",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "VENTA",
                            Numeral = 2,
                            OrderSequence = (short)20
                        },
                        new
                        {
                            Id = 3,
                            Code = "TRF",
                            CompanyId = 1,
                            CreatedBy = "",
                            CreatedDate = new DateTime(2024, 4, 23, 0, 19, 19, 837, DateTimeKind.Utc).AddTicks(4015),
                            CreatedHostName = "",
                            CreatedIpv4 = "",
                            Name = "TRANSFERENCIA",
                            Numeral = 4,
                            OrderSequence = (short)30
                        });
                });

            modelBuilder.Entity("Xanes.Models.CurrencyExchangeRate", b =>
                {
                    b.HasOne("Xanes.Models.Currency", "CurrencyTrx")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_currenciesexchangerates_currencies_currencyid");

                    b.Navigation("CurrencyTrx");
                });

            modelBuilder.Entity("Xanes.Models.Customer", b =>
                {
                    b.HasOne("Xanes.Models.CustomerCategory", "CategoryTrx")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_customers_customerscategories_categoryid");

                    b.HasOne("Xanes.Models.CustomerSector", "SectorTrx")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_customers_customerssectors_sectorid");

                    b.HasOne("Xanes.Models.PersonType", "TypeTrx")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_customers_personstypes_typeid");

                    b.Navigation("CategoryTrx");

                    b.Navigation("SectorTrx");

                    b.Navigation("TypeTrx");
                });

            modelBuilder.Entity("Xanes.Models.CustomerSector", b =>
                {
                    b.HasOne("Xanes.Models.CustomerSector", "ParentTrx")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_customerssectors_customerssectors_parentid");

                    b.Navigation("ParentTrx");
                });

            modelBuilder.Entity("Xanes.Models.Quotation", b =>
                {
                    b.HasOne("Xanes.Models.Currency", "CurrencyDepositTrx")
                        .WithMany()
                        .HasForeignKey("CurrencyDepositId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_currencies_currencydepositid");

                    b.HasOne("Xanes.Models.Currency", "CurrencyTransaTrx")
                        .WithMany()
                        .HasForeignKey("CurrencyTransaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_currencies_currencytransaid");

                    b.HasOne("Xanes.Models.Currency", "CurrencyTransferTrx")
                        .WithMany()
                        .HasForeignKey("CurrencyTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_currencies_currencytransferid");

                    b.HasOne("Xanes.Models.Customer", "CustomerTrx")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_customers_customerid");

                    b.HasOne("Xanes.Models.QuotationType", "TypeTrx")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_quotations_quotationstypes_typeid");

                    b.Navigation("CurrencyDepositTrx");

                    b.Navigation("CurrencyTransaTrx");

                    b.Navigation("CurrencyTransferTrx");

                    b.Navigation("CustomerTrx");

                    b.Navigation("TypeTrx");
                });

            modelBuilder.Entity("Xanes.Models.QuotationDetail", b =>
                {
                    b.HasOne("Xanes.Models.Bank", "BankSourceTrx")
                        .WithMany()
                        .HasForeignKey("BankSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_quotationsdetails_banks_banksourceid");

                    b.HasOne("Xanes.Models.Bank", "BankTargetTrx")
                        .WithMany()
                        .HasForeignKey("BankTargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_quotationsdetails_banks_banktargetid");

                    b.HasOne("Xanes.Models.Currency", "CurrencyDetailTrx")
                        .WithMany()
                        .HasForeignKey("CurrencyDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_quotationsdetails_currencies_currencydetailid");

                    b.HasOne("Xanes.Models.Quotation", "ParentTrx")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_quotationsdetails_quotations_parentid");

                    b.Navigation("BankSourceTrx");

                    b.Navigation("BankTargetTrx");

                    b.Navigation("CurrencyDetailTrx");

                    b.Navigation("ParentTrx");
                });
#pragma warning restore 612, 618
        }
    }
}
